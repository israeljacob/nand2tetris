/** 
 * A class representing the game table for 2048. 
 * The game is played on a 4x4 grid, and the goal is to merge tiles with the same number 
 * to create a tile with the number 2048. 
 * The game is over when the table is full and there are no more possible moves.
 */
class Table2048{
 field Array arrRow1;
 field Array arrRow2;
 field Array arrRow3;
 field Array arrRow4;
 field Array arrCol1;
 field Array arrCol2;
 field Array arrCol3;
 field Array arrCol4;
 field int score;
	
	/**
     * Constructs a new instance of the Table2048 class.
     * Initializes the table, sets the initial score to 0, and creates the first tile.
     * @return The newly created Table2048 instance.
     */
	constructor Table2048 new(){
		// Initialize arrays and score
		let arrRow1 = Array.new(5);
		let arrRow2 = Array.new(5);
		let arrRow3 = Array.new(5);
		let arrRow4 = Array.new(5);
		let arrCol1 = Array.new(5);
		let arrCol2 = Array.new(5);
		let arrCol3 = Array.new(5);
		let arrCol4 = Array.new(5);
		let score = 0;
		
		// Make the game table and place initial value
		do MakeTable();
		let arrCol1[0] = 2;
		let arrRow1[0] = 2;
		do Output.moveCursor(4,22);
    	do Output.printInt(2);
		return this;
	}
	
	/**
     * Disposes of the Table2048 instance by releasing all of its resources.
     */
	method  void dispose(){
		// Dispose of arrays and deallocate object memory
		do arrCol1.dispose();
		do arrCol2.dispose();
		do arrCol3.dispose();
		do arrCol4.dispose();
		do arrRow1.dispose();
		do arrRow2.dispose();
		do arrRow3.dispose();
		do arrRow4.dispose();
		
		do Memory.deAlloc(this);
		return;
	}
	
	/**
     * Initializes the game table by setting all the elements to 0 and drawing the grid lines.
     */
	method void MakeTable(){
		var int i, sizeX, sizeY;
		let i=0;
		let sizeX=150;
		let sizeY=20;
		
		// Draw horizontal lines
		while (i<5){
			let arrRow1[i] = 0;
			let arrRow2[i] = 0;
			let arrRow3[i] = 0;
			let arrRow4[i] = 0;
			let arrCol1[i] = 0;
			let arrCol2[i] = 0;
			let arrCol3[i] = 0;
			let arrCol4[i] = 0;
			
			do Screen.setColor(true);
			do Screen.drawLine(sizeX, sizeY, 350,sizeY);
			let sizeY= sizeY+50;
			let  i=i+1;
			}
		let i=0;
		let sizeX=150;
		let sizeY=20;
		
		// Draw vertical lines
		while (i<5){
			do Screen.setColor(true);
			do Screen.drawLine(sizeX, sizeY, sizeX,220);
			let sizeX= sizeX+50;
			let  i=i+1;
		}
		return;
	}
	
	/**
   * Runs the game loop until the game is over or the user exits the game.
   */
	method void run() {
		var char key;
		var boolean changed;
		
		// Main game loop
		while(true) {
			// Display the score and the game board
			do Output.moveCursor(0,0);
			do Output.printString("Score: ");
			do Output.printInt(score);
			do fillScreen();
			
			// Wait for user input
			while(key = 0) {
				let key = Keyboard.keyPressed();
			}
			
			let changed = false;
			
			// Check arrow keys pressed and move accordingly
			if(key = 131) { // Up arrow
				do moveUp();
				let changed = checkIfSomthingChanged();
				do updateCols();
			}
			if(key = 133) { // Down arrow
				do moveDown();
				let changed = checkIfSomthingChanged();
				do updateCols();
			}
			if(key = 130) { // Left arrow
				do moveLeft();
				let changed = checkIfSomthingChanged();
				do updateRows();
			}
			if(key = 132) { // Right arrow
				do moveRight();
				let changed = checkIfSomthingChanged();
				do updateRows();
			}
			
			// If the game state changed, insert a new tile
			if(changed) {
				do insert2();
			}
			
			 // Update the game board and check for game over conditions
			do updateCols();
			do fillScreen();
			if(checkGameOver()) {
				do Output.moveCursor(10,26);
				do Output.printString("Game over!!!");
				return;
			}
			let key = 0;
		}
		return;
	}
	
	// Moves all of the tiles in the table up one row.
	method void moveUp() {
		var int i, j;
		let i = 0;
		
		// Loop through each row of the table.
		while(i < 4) {
			let j = 0;
			
			// Loop through each column of the row.
			while(j<3) {
				if(arrRow1[i] = 0) {
					let arrRow1[i] = arrRow2[i];
					let arrRow2[i] = arrRow3[i];
					let arrRow3[i] = arrRow4[i];
					let arrRow4[i] = 0;
				}
				let j = j + 1;
			}
			
			let j = 0;
			while(j<2) {
				if(arrRow2[i] = 0) {
					let arrRow2[i] = arrRow3[i];
					let arrRow3[i] = arrRow4[i];
					let arrRow4[i] = 0;
				}
				let j = j + 1;
			}
			
			if(arrRow3[i] = 0) {
					let arrRow3[i] = arrRow4[i];
					let arrRow4[i] = 0;
				}
			
			// Combine adjacent tiles with the same value.
			if(arrRow1[i] = arrRow2[i] & ~(arrRow1[i] = 0)){
				let score = score + (arrRow1[i] * 2);
				let arrRow1[i] = arrRow1[i] * 2;
				let arrRow2[i] = arrRow3[i];
				let arrRow3[i] = arrRow4[i];
				let arrRow4[i] = 0;
			}
			if(arrRow2[i] = arrRow3[i] & ~(arrRow2[i] = 0)){
				let score = score + (arrRow2[i] * 2);
				let arrRow2[i] = arrRow2[i] * 2;
				let arrRow3[i] = arrRow4[i];
				let arrRow4[i] = 0;
			}
			if(arrRow3[i] = arrRow4[i] & ~(arrRow3[i] = 0)){
				let score = score + (arrRow3[i] * 2);
				let arrRow3[i] = arrRow3[i] * 2;
				let arrRow4[i] = 0;
			}
			let i = i + 1;
		}
        return;
    }
	
	// Moves all of the tiles in the table down one row.
	method void moveDown() {
		var int i, j;
		let i = 0;
		
		// Loop through each row of the table.
		while(i < 4) {
			let j = 0;
			
			 // Loop through each column of the row.
			while(j<3) {
				if(arrRow4[i] = 0) {
					let arrRow4[i] = arrRow3[i];
					let arrRow3[i] = arrRow2[i];
					let arrRow2[i] = arrRow1[i];
					let arrRow1[i] = 0;
				}
				let j = j + 1;
			}
			
			let j = 0;
			while(j<2) {
				if(arrRow3[i] = 0) {
					let arrRow3[i] = arrRow2[i];
					let arrRow2[i] = arrRow1[i];
					let arrRow1[i] = 0;
				}
				let j = j + 1;
			}
			
			if(arrRow2[i] = 0) {
					let arrRow2[i] = arrRow1[i];
					let arrRow1[i] = 0;
				}
			
			// Combine adjacent tiles with the same value.
			if(arrRow4[i] = arrRow3[i] & ~(arrRow4[i] = 0)){
				let score = score + (arrRow4[i] * 2);
				let arrRow4[i] = arrRow4[i] * 2;
				let arrRow3[i] = arrRow2[i];
				let arrRow2[i] = arrRow1[i];
				let arrRow1[i] = 0;
			}
			if(arrRow3[i] = arrRow2[i] & ~(arrRow3[i] = 0)){
				let score = score + (arrRow3[i] * 2);
				let arrRow3[i] = arrRow3[i] * 2;
				let arrRow2[i] = arrRow1[i];
				let arrRow1[i] = 0;
			}
			if(arrRow2[i] = arrRow1[i] & ~(arrRow2[i] = 0)){
				let score = score + (arrRow2[i] * 2);
				let arrRow2[i] = arrRow2[i] * 2;
				let arrRow1[i] = 0;
			}
			let i = i + 1;
		}
        return;
	}
	
	// Moves all of the tiles in the table left one column.
	method void moveLeft() {
		var int i, j;
		let i = 0;
		
		// Loop through each column of the table.
		while(i < 4) {
			let j = 0;
			
			// Loop through each row of the column.
			while(j<3) {
				if(arrCol1[i] = 0) {
					let arrCol1[i] = arrCol2[i];
					let arrCol2[i] = arrCol3[i];
					let arrCol3[i] = arrCol4[i];
					let arrCol4[i] = 0;
				}
				let j = j + 1;
			}
			
			let j = 0;
			while(j<2) {
				if(arrCol2[i] = 0) {
					let arrCol2[i] = arrCol3[i];
					let arrCol3[i] = arrCol4[i];
					let arrCol4[i] = 0;
				}
				let j = j + 1;
			}
			
			if(arrCol3[i] = 0) {
					let arrCol3[i] = arrCol4[i];
					let arrCol4[i] = 0;
				}
			
			// Combine adjacent tiles with the same value.
			if(arrCol1[i] = arrCol2[i] & ~(arrCol1[i] = 0)){
				let score = score + (arrCol1[i] * 2);
				let arrCol1[i] = arrCol1[i] * 2;
				let arrCol2[i] = arrCol3[i];
				let arrCol3[i] = arrCol4[i];
				let arrCol4[i] = 0;
			}
			if(arrCol2[i] = arrCol3[i] & ~(arrCol2[i] = 0)){
				let score = score + (arrCol2[i] * 2);
				let arrCol2[i] = arrCol2[i] * 2;
				let arrCol3[i] = arrCol4[i];
				let arrCol4[i] = 0;
			}
			if(arrCol3[i] = arrCol4[i] & ~(arrCol3[i] = 0)){
				let score = score + (arrCol3[i] * 2);
				let arrCol3[i] = arrCol3[i] * 2;
				let arrCol4[i] = 0;
			}
			let i = i + 1;
		}
        return;
	}
	
	// Moves all of the tiles in the table right one column.
	method void moveRight() {
		var int i, j;
		let i = 0;
		
		// Loop through each column of the table.
		while(i < 4) {
			let j = 0;
			
			// Loop through each row of the column.
			while(j<3) {
				if(arrCol4[i] = 0) {
					let arrCol4[i] = arrCol3[i];
					let arrCol3[i] = arrCol2[i];
					let arrCol2[i] = arrCol1[i];
					let arrCol1[i] = 0;
				}
				let j = j + 1;
			}
			
			let j = 0;
			while(j<2) {
				if(arrCol3[i] = 0) {
					let arrCol3[i] = arrCol2[i];
					let arrCol2[i] = arrCol1[i];
					let arrCol1[i] = 0;
				}
				let j = j + 1;
			}
			
			if(arrCol2[i] = 0) {
					let arrCol2[i] = arrCol1[i];
					let arrCol1[i] = 0;
				}
			
			// Combine adjacent tiles with the same value.
			if(arrCol4[i] = arrCol3[i] & ~(arrCol4[i] = 0)){
				let score = score + (arrCol4[i] * 2);
				let arrCol4[i] = arrCol4[i] * 2;
				let arrCol3[i] = arrCol2[i];
				let arrCol2[i] = arrCol1[i];
				let arrCol1[i] = 0;
			}
			if(arrCol3[i] = arrCol2[i] & ~(arrCol3[i] = 0)){
				let score = score + (arrCol3[i] * 2);
				let arrCol3[i] = arrCol3[i] * 2;
				let arrCol2[i] = arrCol1[i];
				let arrCol1[i] = 0;
			}
			if(arrCol2[i] = arrCol1[i] & ~(arrCol2[i] = 0)){
				let score = score + (arrCol2[i] * 2);
				let arrCol2[i] = arrCol2[i] * 2;
				let arrCol1[i] = 0;
			}
			let i = i + 1;
		}
        return;
	}
	
	/**
     * Updates the row arrays based on the column arrays.
     */
	method void updateCols() {
		let arrCol1[0] = arrRow1[0];
		let arrCol1[1] = arrRow2[0];
		let arrCol1[2] = arrRow3[0];
		let arrCol1[3] = arrRow4[0];
		
		let arrCol2[0] = arrRow1[1];
		let arrCol2[1] = arrRow2[1];
		let arrCol2[2] = arrRow3[1];
		let arrCol2[3] = arrRow4[1];
		
		let arrCol3[0] = arrRow1[2];
		let arrCol3[1] = arrRow2[2];
		let arrCol3[2] = arrRow3[2];
		let arrCol3[3] = arrRow4[2];
		
		let arrCol4[0] = arrRow1[3];
		let arrCol4[1] = arrRow2[3];
		let arrCol4[2] = arrRow3[3];
		let arrCol4[3] = arrRow4[3];
		return;
	}
	
	/**
     * Updates the column arrays based on the row arrays.
     */
	method void updateRows() {
		let arrRow1[0] = arrCol1[0];
		let arrRow1[1] = arrCol2[0];
		let arrRow1[2] = arrCol3[0];
		let arrRow1[3] = arrCol4[0];
		
		let arrRow2[0] = arrCol1[1];
		let arrRow2[1] = arrCol2[1];
		let arrRow2[2] = arrCol3[1];
		let arrRow2[3] = arrCol4[1];
		
		let arrRow3[0] = arrCol1[2];
		let arrRow3[1] = arrCol2[2];
		let arrRow3[2] = arrCol3[2];
		let arrRow3[3] = arrCol4[2];
		
		let arrRow4[0] = arrCol1[3];
		let arrRow4[1] = arrCol2[3];
		let arrRow4[2] = arrCol3[3];
		let arrRow4[3] = arrCol4[3];
		return;
	}
	
	
    //Inserts a new tile with the number 2 at a random position on the board. 
	method void insert2() {
		if(arrRow2[3] = 0) {
			let arrRow2[3] = 2;
			return;
		}
		
		if(arrRow1[0] = 0) {
			let arrRow1[0] = 2;
			return;
		}
		
		if(arrRow4[1] = 0) {
			let arrRow4[1] = 2;
			return;
		}
		
		if(arrRow4[2] = 0) {
			let arrRow4[2] = 2;
			return;
		}
		
		if(arrRow4[3] = 0) {
			let arrRow4[3] = 2;
			return;
		}
		
		if(arrRow1[1] = 0) {
			let arrRow1[1] = 2;
			return;
		}
		
		if(arrRow1[2] = 0) {
			let arrRow1[2] = 2;
			return;
		}
		
		if(arrRow1[3] = 0) {
			let arrRow1[3] = 2;
			return;
		}
		
		if(arrRow1[1] = 0) {
			let arrRow1[1] = 2;
			return;
		}
		
		if(arrRow2[1] = 0) {
			let arrRow2[1] = 2;
			return;
		}
		
		if(arrRow2[2] = 0) {
			let arrRow2[2] = 2;
			return;
		}
		
		if(arrRow2[0] = 0) {
			let arrRow2[0] = 2;
			return;
		}
		
		if(arrRow3[0] = 0) {
			let arrRow3[0] = 2;
			return;
		}
		
		if(arrRow3[1] = 0) {
			let arrRow3[1] = 2;
			return;
		}
		
		if(arrRow3[2] = 0) {
			let arrRow3[2] = 2;
			return;
		}
		
		if(arrRow3[3] = 0) {
			let arrRow3[3] = 2;
			return;
		}
		
		if(arrRow4[0] = 0) {
			let arrRow4[0] = 2;
			return;
		}
		return;
	}
	
	/**Checks if the game is over by verifying that there are no empty tiles
    *  and no adjacent tiles with the same number.
        
    *  @Returns:
    *  A boolean value indicating whether the game is over (True) or not (False).
    */
	method boolean checkGameOver() {
		var boolean gameOver;
		var int i;
		let gameOver = true;
		let i = 0;
		while(i < 4) {
			if(arrRow1[i] = 0) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow2[i] = 0) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow3[i] = 0) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow4[i] = 0) {
				let gameOver = false;
				return gameOver;
			}
		}
		
		while(i < 3) {
			if(arrRow1[i] = arrRow2[i] | arrRow1[i] = arrRow1[i + 1]) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow2[i] = arrRow3[i] | arrRow2[i] = arrRow2[i + 1]) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow3[i] = arrRow4[i] | arrRow3[i] = arrRow3[i + 1]) {
				let gameOver = false;
				return gameOver;
			}
			
			if(arrRow4[i] = arrRow4[i + 1]) {
				let gameOver = false;
				return gameOver;
			}
		}
		return gameOver;
	}
	
	/**
    Check if there's any tile on the game board has been changed.
    @return true if any tile has been changed, false otherwise.
	*/
	method boolean checkIfSomthingChanged() {
		var boolean changed;
		let changed = false;
		
		if(~(arrRow1[0] = arrCol1[0])){
			return true;
		}
		
		if(~(arrRow1[1] = arrCol2[0])){
			return true;
		}
		
		if(~(arrRow1[2] = arrCol3[0])){
			return true;
		}
		
		if(~(arrRow1[3] = arrCol4[0])){
			return true;
		}
		
		if(~(arrRow2[0] = arrCol1[1])){
			return true;
		}
		
		if(~(arrRow2[1] = arrCol2[1])){
			return true;
		}
		
		if(~(arrRow2[2] = arrCol3[1])){
			return true;
		}
		
		if(~(arrRow2[3] = arrCol4[1])){
			return true;
		}
		
		if(~(arrRow3[0] = arrCol1[2])){
			return true;
		}
		
		if(~(arrRow3[1] = arrCol2[2])){
			return true;
		}
		
		if(~(arrRow3[2] = arrCol3[2])){
			return true;
		}
		
		if(~(arrRow3[3] = arrCol4[2])){
			return true;
		}
		
		if(~(arrRow4[0] = arrCol1[3])){
			return true;
		}
		
		if(~(arrRow4[1] = arrCol2[3])){
			return true;
		}
		
		if(~(arrRow4[2] = arrCol3[3])){
			return true;
		}
		
		if(~(arrRow4[3] = arrCol4[3])){
			return true;
		}
		return false;
	}
	
	/**
	Fills the screen with the tiles of the game board and their values.
	*/
	method void fillScreen() {
		var int i, row, col;
		let i = 0;
		let row = 4;
		let col = 22;
		while(i < 4) {
			do Output.moveCursor(row,col + 2);
			do Output.moveCursor(row,col + 1);
			do Output.moveCursor(row,col);
			if(~(arrRow1[i] = 0)) {
				do Output.printInt(arrRow1[i]);
			}
			let i = i + 1;
			let col = col + 6;
		}
		let i = 0;
		let row = row + 4;
		let col = 22;
		
		while(i < 4) {
			do Output.moveCursor(row,col + 2);
			do Output.moveCursor(row,col + 1);
			do Output.moveCursor(row,col);
			if(~(arrRow2[i] = 0)) {
				do Output.printInt(arrRow2[i]);
			}
			let i = i + 1;
			let col = col + 6;
		}
		let i = 0;
		let row = row + 4;
		let col = 22;
		
		while(i < 4) {
			do Output.moveCursor(row,col + 2);
			do Output.moveCursor(row,col + 1);
			do Output.moveCursor(row,col);
			if(~(arrRow3[i] = 0)) {
				do Output.printInt(arrRow3[i]);
			}
			let i = i + 1;
			let col = col + 6;
		}
		let i = 0;
		let row = row + 4;
		let col = 22;
		
		while(i < 4) {
			do Output.moveCursor(row,col + 2);
			do Output.moveCursor(row,col + 1);
			do Output.moveCursor(row,col);
			if(~(arrRow4[i] = 0)) {
				do Output.printInt(arrRow4[i]);
			}
			let i = i + 1;
			let col = col + 6;
		}
		return;
	}
}